docker

image - 
    It is a snapshot or a blueprint of a complete
    environment for an application . it includes every thing like
    what the app needs to run , such as libraries , dependencies
    config,etc. it kind encapsulates the app & all the represent together

 for create image we have to create docker file

containers -
    Container is an actual instance of the evnvironemtn
    configured by the image. when we run docker image
    it create a live and runny container . this container
    are isolated & light weight virtual machine.

    a big diff btw conteainer & Vm is that container
    share the host os kernel.

containers are isolated from any process of host machine

//download image from docker hub
docker pull <image_name>

// run docker container in interactive mode by -it and --rm use to remove container after exit
docker run it --rm node(image_name)
after we go back from container it is in exited mode

// info of container
docker ps 

//for exited the container
 docker kill container_id

//daemon container running in background after interactive session
docker run --detach -it  image_name
gives hash of container or container_id


//back to interactive session of container
docker attach container_id

// remove container
docker rm container_name

// custom name to container
docker run -it --detach --name custom-node node


// another way of detach with interactive afterward is
docker run -dit image_name


// image description
docker inspect image_name

// for pause container
 docker pause container_id

// for unpause container
docker unpause container_id

// runs a command on a existing running container
docker exec -it container_name command_name

// docker exec -it container_name ps aux

make folder and create Dockerfile

FROM node

CMD ["node", "-e","console.log(100)"]

// console and cd in that folder or instead dot give path
docker build -t my-basic-image .
//for building image

docker run -it my-basic-image:latest
// for run

// for remove image
docker rmi my-basic-image:latest

// on server in host machine
docker run -it --init my-express-server:latest 

//for publish port
docker run -it --init --publish 3000:3000 my-express-server:latest

.......how dockerizing project from github.......
Dockerfile

FROM node

WORKDIR /developer/nodejs/app_from_github

RUN apt-get update && apt-get install -y git // for debian linux git installation command

RUN git clone repo_name

ENV PORT 3000

RUN npm ci 

CMD ["npm","start"]

docker build -t app-from-github .

docker run -it --init --publish 3001:3000 app-from-github:latest


........exit.......................................

if we not use --publish another way 

to 
EXPOSE 3000 //in Dockerfile

and run CMD
docker run -it --init -P app-from-github

//clean up the whole system and delete every image contanier etc:
docker system prune -a

........BIND MOUNT.............
it use to merge host Dockerfile to container whatever change we made in host server that change is also applied in docker running container file

cd on host directory where that file is exist

then 
cmd 
docker run -it --init -publish 3002:3000 -v "${pwd}":/developer/nodejs/node-bind-mount container_name 

to go container bash
docker run -it --init -publish 3002:3000 -v "${pwd}":/developer/nodejs/node-bind-mount container_name  bash


**************************************

.......DOCKER VOLUMLE................
docker volume is used to persist the data of a container at a place

in bigger project like flight services , which having more no of library if 
we do bind mount over there so there might be case of node_modules confiction of dependencies

so for that purpose we use docker volume

docker volume create api-gateway-node-modules 

docker run -it --init -p 3001:3001 -v "${pwd}":/developer/nodejs/api-gateway -v api-gateway-node-modules:/developer/nodejs/api-gateway/node_modules (tag_of_image)


***********************************

.......communication btw docker container................

docker network ls //for check existing bridges

docker network create microservice-network // create new bridge for docker container

docker inspect microservice-network //got whole config of bridge and existing network

docker run -it --init --name flights_service --network microservice-network -p 3000:3000
-v "${pwd}":/developer/nodejs/flights-service 
-v flights-service-node-modules:/developer/nodejs/flights-service/node_modules flights-service:latest

docker build -t api-gateway .

docker run -it --init --name api_gateway --network microservice-network -p 3001:3001 -v "${pwd}":/developer/nodejs/api-gateway
-v api-gateway-node-modules:/developer/nodejs/api-gateway/node_modules api-gateway:latest


***************************************************************


........DOCKER Compose.............
for not running all command in terminal so we create docker.yaml file which 
compose all thing in one place

create docker-compose.yml file
version:"3"  //compose version
services:
  api_gateway:
    build: ./api-gateway //path of microservice
    networks:
     -microservice-network
    ports:
      - "3001:3001"
    volume:
      - ./api-gateway:/developer/nodejs/api-gateway //for bind mount
      - api-gateway-node-modules:/developer/nodejs/api-gateway/node_modules
................................


docker compose up -d 
docker compose down 


........For pushing image to docker hub..........
type docker login in cmd
username
password

docker tag image_name tag_name(ex : username/image_name)
docker push username/image_name


****************************************************

